Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    READ
    WRITE

Grammar

Rule 0     S' -> Program
Rule 1     Program -> PROGRAM ID SEMICOLON Block DOT
Rule 2     Block -> Declarations CompoundStatement
Rule 3     Declarations -> VarDeclarationPart FunctionDeclarations
Rule 4     VarDeclarationPart -> VAR VarDeclarationList
Rule 5     VarDeclarationPart -> empty
Rule 6     VarDeclarationList -> VarDeclaration
Rule 7     VarDeclarationList -> VarDeclarationList VarDeclaration
Rule 8     VarDeclaration -> IdList COLON Type SEMICOLON
Rule 9     IdList -> ID
Rule 10    IdList -> ID COMMA IdList
Rule 11    Type -> BasicType
Rule 12    Type -> ArrayType
Rule 13    BasicType -> INTEGER
Rule 14    BasicType -> STRING
Rule 15    BasicType -> BOOLEAN
Rule 16    ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType
Rule 17    FunctionDeclarations -> FunctionDeclaration FunctionDeclarations
Rule 18    FunctionDeclarations -> empty
Rule 19    FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement
Rule 20    FormalParameters -> ID COLON Type
Rule 21    FormalParameters -> ID COLON Type SEMICOLON FormalParameters
Rule 22    FormalParameters -> empty
Rule 23    CompoundStatement -> BEGIN StatementList END
Rule 24    StatementList -> Statement
Rule 25    StatementList -> StatementList SEMICOLON Statement
Rule 26    Statement -> AssignmentStatement
Rule 27    Statement -> WriteStatement
Rule 28    Statement -> ReadStatement
Rule 29    Statement -> IfStatement
Rule 30    Statement -> WhileStatement
Rule 31    Statement -> ForStatement
Rule 32    Statement -> CompoundStatement
Rule 33    Statement -> empty
Rule 34    ReadStatement -> READLN LPAREN ArrayAccess RPAREN
Rule 35    ReadStatement -> READLN LPAREN ID RPAREN
Rule 36    AssignmentStatement -> ID ASSIGN Expression
Rule 37    AssignmentStatement -> ArrayAccess ASSIGN Expression
Rule 38    WriteStatement -> WRITELN LPAREN ExpressionList RPAREN
Rule 39    ExpressionList -> Expression
Rule 40    ExpressionList -> ExpressionList COMMA Expression
Rule 41    IfStatement -> IF Expression THEN Statement
Rule 42    IfStatement -> IF Expression THEN Statement ELSE Statement
Rule 43    WhileStatement -> WHILE Expression DO Statement
Rule 44    ForStatement -> FOR ID ASSIGN Expression TO Expression DO Statement
Rule 45    Expression -> ExprBool
Rule 46    ExprBool -> Expr
Rule 47    ExprBool -> Expr OpRel Expr
Rule 48    OpRel -> EQ
Rule 49    OpRel -> NEQ
Rule 50    OpRel -> LT
Rule 51    OpRel -> LTE
Rule 52    OpRel -> GT
Rule 53    OpRel -> GTE
Rule 54    Expr -> Termo
Rule 55    Expr -> Expr OpAd Termo
Rule 56    OpAd -> PLUS
Rule 57    OpAd -> MINUS
Rule 58    OpAd -> OR
Rule 59    Termo -> Fator
Rule 60    Termo -> Termo OpMul Fator
Rule 61    OpMul -> TIMES
Rule 62    OpMul -> DIV
Rule 63    OpMul -> MOD
Rule 64    OpMul -> AND
Rule 65    Fator -> Const
Rule 66    Fator -> Var
Rule 67    Fator -> LPAREN ExprBool RPAREN
Rule 68    Fator -> Expression_function_call
Rule 69    Fator -> NOT Fator
Rule 70    Const -> NUMBER
Rule 71    Const -> STRING_LITERAL
Rule 72    Const -> TRUE
Rule 73    Const -> FALSE
Rule 74    Var -> ID
Rule 75    Var -> ID LBRACKET ExprBool RBRACKET
Rule 76    Expression_function_call -> ID LPAREN ActualParameters RPAREN
Rule 77    Expression_function_call -> LENGTH LPAREN ExprBool RPAREN
Rule 78    ActualParameters -> ExprBool
Rule 79    ActualParameters -> ExprBool COMMA ActualParameters
Rule 80    ActualParameters -> empty
Rule 81    ArrayAccess -> ID LBRACKET Expression RBRACKET
Rule 82    empty -> <empty>

Terminals, with rules where they appear

AND                  : 64
ARRAY                : 16
ASSIGN               : 36 37 44
BEGIN                : 23
BOOLEAN              : 15
COLON                : 8 19 20 21
COMMA                : 10 40 79
DIV                  : 62
DO                   : 43 44
DOT                  : 1
DOTDOT               : 16
ELSE                 : 42
END                  : 23
EQ                   : 48
FALSE                : 73
FOR                  : 44
FUNCTION             : 19
GT                   : 52
GTE                  : 53
ID                   : 1 9 10 19 20 21 35 36 44 74 75 76 81
IF                   : 41 42
INTEGER              : 13
LBRACKET             : 16 75 81
LENGTH               : 77
LPAREN               : 19 34 35 38 67 76 77
LT                   : 50
LTE                  : 51
MINUS                : 57
MOD                  : 63
NEQ                  : 49
NOT                  : 69
NUMBER               : 16 16 70
OF                   : 16
OR                   : 58
PLUS                 : 56
PROGRAM              : 1
RBRACKET             : 16 75 81
READ                 : 
READLN               : 34 35
RPAREN               : 19 34 35 38 67 76 77
SEMICOLON            : 1 8 19 21 25
STRING               : 14
STRING_LITERAL       : 71
THEN                 : 41 42
TIMES                : 61
TO                   : 44
TRUE                 : 72
VAR                  : 4
WHILE                : 43
WRITE                : 
WRITELN              : 38
error                : 

Nonterminals, with rules where they appear

ActualParameters     : 76 79
ArrayAccess          : 34 37
ArrayType            : 12
AssignmentStatement  : 26
BasicType            : 11 16 19
Block                : 1
CompoundStatement    : 2 19 32
Const                : 65
Declarations         : 2 19
Expr                 : 46 47 47 55
ExprBool             : 45 67 75 77 78 79
Expression           : 36 37 39 40 41 42 43 44 44 81
ExpressionList       : 38 40
Expression_function_call : 68
Fator                : 59 60 69
ForStatement         : 31
FormalParameters     : 19 21
FunctionDeclaration  : 17
FunctionDeclarations : 3 17
IdList               : 8 10
IfStatement          : 29
OpAd                 : 55
OpMul                : 60
OpRel                : 47
Program              : 0
ReadStatement        : 28
Statement            : 24 25 41 42 42 43 44
StatementList        : 23 25
Termo                : 54 55 60
Type                 : 8 20 21
Var                  : 66
VarDeclaration       : 6 7
VarDeclarationList   : 4 7
VarDeclarationPart   : 3
WhileStatement       : 30
WriteStatement       : 27
empty                : 5 18 22 33 80

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . PROGRAM ID SEMICOLON Block DOT

    PROGRAM         shift and go to state 2

    Program                        shift and go to state 1

state 1

    (0) S' -> Program .



state 2

    (1) Program -> PROGRAM . ID SEMICOLON Block DOT

    ID              shift and go to state 3


state 3

    (1) Program -> PROGRAM ID . SEMICOLON Block DOT

    SEMICOLON       shift and go to state 4


state 4

    (1) Program -> PROGRAM ID SEMICOLON . Block DOT
    (2) Block -> . Declarations CompoundStatement
    (3) Declarations -> . VarDeclarationPart FunctionDeclarations
    (4) VarDeclarationPart -> . VAR VarDeclarationList
    (5) VarDeclarationPart -> . empty
    (82) empty -> .

    VAR             shift and go to state 8
    FUNCTION        reduce using rule 82 (empty -> .)
    BEGIN           reduce using rule 82 (empty -> .)

    Block                          shift and go to state 5
    Declarations                   shift and go to state 6
    VarDeclarationPart             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (1) Program -> PROGRAM ID SEMICOLON Block . DOT

    DOT             shift and go to state 10


state 6

    (2) Block -> Declarations . CompoundStatement
    (23) CompoundStatement -> . BEGIN StatementList END

    BEGIN           shift and go to state 12

    CompoundStatement              shift and go to state 11

state 7

    (3) Declarations -> VarDeclarationPart . FunctionDeclarations
    (17) FunctionDeclarations -> . FunctionDeclaration FunctionDeclarations
    (18) FunctionDeclarations -> . empty
    (19) FunctionDeclaration -> . FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement
    (82) empty -> .

    FUNCTION        shift and go to state 16
    BEGIN           reduce using rule 82 (empty -> .)

    FunctionDeclarations           shift and go to state 13
    FunctionDeclaration            shift and go to state 14
    empty                          shift and go to state 15

state 8

    (4) VarDeclarationPart -> VAR . VarDeclarationList
    (6) VarDeclarationList -> . VarDeclaration
    (7) VarDeclarationList -> . VarDeclarationList VarDeclaration
    (8) VarDeclaration -> . IdList COLON Type SEMICOLON
    (9) IdList -> . ID
    (10) IdList -> . ID COMMA IdList

    ID              shift and go to state 20

    VarDeclarationList             shift and go to state 17
    VarDeclaration                 shift and go to state 18
    IdList                         shift and go to state 19

state 9

    (5) VarDeclarationPart -> empty .

    FUNCTION        reduce using rule 5 (VarDeclarationPart -> empty .)
    BEGIN           reduce using rule 5 (VarDeclarationPart -> empty .)


state 10

    (1) Program -> PROGRAM ID SEMICOLON Block DOT .

    $end            reduce using rule 1 (Program -> PROGRAM ID SEMICOLON Block DOT .)


state 11

    (2) Block -> Declarations CompoundStatement .

    DOT             reduce using rule 2 (Block -> Declarations CompoundStatement .)


state 12

    (23) CompoundStatement -> BEGIN . StatementList END
    (24) StatementList -> . Statement
    (25) StatementList -> . StatementList SEMICOLON Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    StatementList                  shift and go to state 21
    Statement                      shift and go to state 22
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 13

    (3) Declarations -> VarDeclarationPart FunctionDeclarations .

    BEGIN           reduce using rule 3 (Declarations -> VarDeclarationPart FunctionDeclarations .)


state 14

    (17) FunctionDeclarations -> FunctionDeclaration . FunctionDeclarations
    (17) FunctionDeclarations -> . FunctionDeclaration FunctionDeclarations
    (18) FunctionDeclarations -> . empty
    (19) FunctionDeclaration -> . FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement
    (82) empty -> .

    FUNCTION        shift and go to state 16
    BEGIN           reduce using rule 82 (empty -> .)

    FunctionDeclaration            shift and go to state 14
    FunctionDeclarations           shift and go to state 38
    empty                          shift and go to state 15

state 15

    (18) FunctionDeclarations -> empty .

    BEGIN           reduce using rule 18 (FunctionDeclarations -> empty .)


state 16

    (19) FunctionDeclaration -> FUNCTION . ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement

    ID              shift and go to state 39


state 17

    (4) VarDeclarationPart -> VAR VarDeclarationList .
    (7) VarDeclarationList -> VarDeclarationList . VarDeclaration
    (8) VarDeclaration -> . IdList COLON Type SEMICOLON
    (9) IdList -> . ID
    (10) IdList -> . ID COMMA IdList

    FUNCTION        reduce using rule 4 (VarDeclarationPart -> VAR VarDeclarationList .)
    BEGIN           reduce using rule 4 (VarDeclarationPart -> VAR VarDeclarationList .)
    ID              shift and go to state 20

    VarDeclaration                 shift and go to state 40
    IdList                         shift and go to state 19

state 18

    (6) VarDeclarationList -> VarDeclaration .

    ID              reduce using rule 6 (VarDeclarationList -> VarDeclaration .)
    FUNCTION        reduce using rule 6 (VarDeclarationList -> VarDeclaration .)
    BEGIN           reduce using rule 6 (VarDeclarationList -> VarDeclaration .)


state 19

    (8) VarDeclaration -> IdList . COLON Type SEMICOLON

    COLON           shift and go to state 41


state 20

    (9) IdList -> ID .
    (10) IdList -> ID . COMMA IdList

    COLON           reduce using rule 9 (IdList -> ID .)
    COMMA           shift and go to state 42


state 21

    (23) CompoundStatement -> BEGIN StatementList . END
    (25) StatementList -> StatementList . SEMICOLON Statement

    END             shift and go to state 43
    SEMICOLON       shift and go to state 44


state 22

    (24) StatementList -> Statement .

    END             reduce using rule 24 (StatementList -> Statement .)
    SEMICOLON       reduce using rule 24 (StatementList -> Statement .)


state 23

    (26) Statement -> AssignmentStatement .

    END             reduce using rule 26 (Statement -> AssignmentStatement .)
    SEMICOLON       reduce using rule 26 (Statement -> AssignmentStatement .)
    ELSE            reduce using rule 26 (Statement -> AssignmentStatement .)


state 24

    (27) Statement -> WriteStatement .

    END             reduce using rule 27 (Statement -> WriteStatement .)
    SEMICOLON       reduce using rule 27 (Statement -> WriteStatement .)
    ELSE            reduce using rule 27 (Statement -> WriteStatement .)


state 25

    (28) Statement -> ReadStatement .

    END             reduce using rule 28 (Statement -> ReadStatement .)
    SEMICOLON       reduce using rule 28 (Statement -> ReadStatement .)
    ELSE            reduce using rule 28 (Statement -> ReadStatement .)


state 26

    (29) Statement -> IfStatement .

    END             reduce using rule 29 (Statement -> IfStatement .)
    SEMICOLON       reduce using rule 29 (Statement -> IfStatement .)
    ELSE            reduce using rule 29 (Statement -> IfStatement .)


state 27

    (30) Statement -> WhileStatement .

    END             reduce using rule 30 (Statement -> WhileStatement .)
    SEMICOLON       reduce using rule 30 (Statement -> WhileStatement .)
    ELSE            reduce using rule 30 (Statement -> WhileStatement .)


state 28

    (31) Statement -> ForStatement .

    END             reduce using rule 31 (Statement -> ForStatement .)
    SEMICOLON       reduce using rule 31 (Statement -> ForStatement .)
    ELSE            reduce using rule 31 (Statement -> ForStatement .)


state 29

    (32) Statement -> CompoundStatement .

    END             reduce using rule 32 (Statement -> CompoundStatement .)
    SEMICOLON       reduce using rule 32 (Statement -> CompoundStatement .)
    ELSE            reduce using rule 32 (Statement -> CompoundStatement .)


state 30

    (33) Statement -> empty .

    END             reduce using rule 33 (Statement -> empty .)
    SEMICOLON       reduce using rule 33 (Statement -> empty .)
    ELSE            reduce using rule 33 (Statement -> empty .)


state 31

    (36) AssignmentStatement -> ID . ASSIGN Expression
    (81) ArrayAccess -> ID . LBRACKET Expression RBRACKET

    ASSIGN          shift and go to state 45
    LBRACKET        shift and go to state 46


state 32

    (37) AssignmentStatement -> ArrayAccess . ASSIGN Expression

    ASSIGN          shift and go to state 47


state 33

    (38) WriteStatement -> WRITELN . LPAREN ExpressionList RPAREN

    LPAREN          shift and go to state 48


state 34

    (34) ReadStatement -> READLN . LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> READLN . LPAREN ID RPAREN

    LPAREN          shift and go to state 49


state 35

    (41) IfStatement -> IF . Expression THEN Statement
    (42) IfStatement -> IF . Expression THEN Statement ELSE Statement
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 50
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 36

    (43) WhileStatement -> WHILE . Expression DO Statement
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 66
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 37

    (44) ForStatement -> FOR . ID ASSIGN Expression TO Expression DO Statement

    ID              shift and go to state 67


state 38

    (17) FunctionDeclarations -> FunctionDeclaration FunctionDeclarations .

    BEGIN           reduce using rule 17 (FunctionDeclarations -> FunctionDeclaration FunctionDeclarations .)


state 39

    (19) FunctionDeclaration -> FUNCTION ID . LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement

    LPAREN          shift and go to state 68


state 40

    (7) VarDeclarationList -> VarDeclarationList VarDeclaration .

    ID              reduce using rule 7 (VarDeclarationList -> VarDeclarationList VarDeclaration .)
    FUNCTION        reduce using rule 7 (VarDeclarationList -> VarDeclarationList VarDeclaration .)
    BEGIN           reduce using rule 7 (VarDeclarationList -> VarDeclarationList VarDeclaration .)


state 41

    (8) VarDeclaration -> IdList COLON . Type SEMICOLON
    (11) Type -> . BasicType
    (12) Type -> . ArrayType
    (13) BasicType -> . INTEGER
    (14) BasicType -> . STRING
    (15) BasicType -> . BOOLEAN
    (16) ArrayType -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType

    INTEGER         shift and go to state 72
    STRING          shift and go to state 73
    BOOLEAN         shift and go to state 74
    ARRAY           shift and go to state 75

    Type                           shift and go to state 69
    BasicType                      shift and go to state 70
    ArrayType                      shift and go to state 71

state 42

    (10) IdList -> ID COMMA . IdList
    (9) IdList -> . ID
    (10) IdList -> . ID COMMA IdList

    ID              shift and go to state 20

    IdList                         shift and go to state 76

state 43

    (23) CompoundStatement -> BEGIN StatementList END .

    DOT             reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)
    END             reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)
    SEMICOLON       reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)
    ELSE            reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)
    FUNCTION        reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)
    BEGIN           reduce using rule 23 (CompoundStatement -> BEGIN StatementList END .)


state 44

    (25) StatementList -> StatementList SEMICOLON . Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    Statement                      shift and go to state 77
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 45

    (36) AssignmentStatement -> ID ASSIGN . Expression
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 78
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 46

    (81) ArrayAccess -> ID LBRACKET . Expression RBRACKET
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 79
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 47

    (37) AssignmentStatement -> ArrayAccess ASSIGN . Expression
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 80
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 48

    (38) WriteStatement -> WRITELN LPAREN . ExpressionList RPAREN
    (39) ExpressionList -> . Expression
    (40) ExpressionList -> . ExpressionList COMMA Expression
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ExpressionList                 shift and go to state 81
    Expression                     shift and go to state 82
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 49

    (34) ReadStatement -> READLN LPAREN . ArrayAccess RPAREN
    (35) ReadStatement -> READLN LPAREN . ID RPAREN
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 84

    ArrayAccess                    shift and go to state 83

state 50

    (41) IfStatement -> IF Expression . THEN Statement
    (42) IfStatement -> IF Expression . THEN Statement ELSE Statement

    THEN            shift and go to state 85


state 51

    (45) Expression -> ExprBool .

    THEN            reduce using rule 45 (Expression -> ExprBool .)
    DO              reduce using rule 45 (Expression -> ExprBool .)
    END             reduce using rule 45 (Expression -> ExprBool .)
    SEMICOLON       reduce using rule 45 (Expression -> ExprBool .)
    ELSE            reduce using rule 45 (Expression -> ExprBool .)
    RBRACKET        reduce using rule 45 (Expression -> ExprBool .)
    RPAREN          reduce using rule 45 (Expression -> ExprBool .)
    COMMA           reduce using rule 45 (Expression -> ExprBool .)
    TO              reduce using rule 45 (Expression -> ExprBool .)


state 52

    (46) ExprBool -> Expr .
    (47) ExprBool -> Expr . OpRel Expr
    (55) Expr -> Expr . OpAd Termo
    (48) OpRel -> . EQ
    (49) OpRel -> . NEQ
    (50) OpRel -> . LT
    (51) OpRel -> . LTE
    (52) OpRel -> . GT
    (53) OpRel -> . GTE
    (56) OpAd -> . PLUS
    (57) OpAd -> . MINUS
    (58) OpAd -> . OR

    THEN            reduce using rule 46 (ExprBool -> Expr .)
    DO              reduce using rule 46 (ExprBool -> Expr .)
    END             reduce using rule 46 (ExprBool -> Expr .)
    SEMICOLON       reduce using rule 46 (ExprBool -> Expr .)
    ELSE            reduce using rule 46 (ExprBool -> Expr .)
    RBRACKET        reduce using rule 46 (ExprBool -> Expr .)
    RPAREN          reduce using rule 46 (ExprBool -> Expr .)
    COMMA           reduce using rule 46 (ExprBool -> Expr .)
    TO              reduce using rule 46 (ExprBool -> Expr .)
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    LT              shift and go to state 90
    LTE             shift and go to state 91
    GT              shift and go to state 92
    GTE             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96

    OpRel                          shift and go to state 86
    OpAd                           shift and go to state 87

state 53

    (54) Expr -> Termo .
    (60) Termo -> Termo . OpMul Fator
    (61) OpMul -> . TIMES
    (62) OpMul -> . DIV
    (63) OpMul -> . MOD
    (64) OpMul -> . AND

    EQ              reduce using rule 54 (Expr -> Termo .)
    NEQ             reduce using rule 54 (Expr -> Termo .)
    LT              reduce using rule 54 (Expr -> Termo .)
    LTE             reduce using rule 54 (Expr -> Termo .)
    GT              reduce using rule 54 (Expr -> Termo .)
    GTE             reduce using rule 54 (Expr -> Termo .)
    PLUS            reduce using rule 54 (Expr -> Termo .)
    MINUS           reduce using rule 54 (Expr -> Termo .)
    OR              reduce using rule 54 (Expr -> Termo .)
    THEN            reduce using rule 54 (Expr -> Termo .)
    DO              reduce using rule 54 (Expr -> Termo .)
    END             reduce using rule 54 (Expr -> Termo .)
    SEMICOLON       reduce using rule 54 (Expr -> Termo .)
    ELSE            reduce using rule 54 (Expr -> Termo .)
    RBRACKET        reduce using rule 54 (Expr -> Termo .)
    RPAREN          reduce using rule 54 (Expr -> Termo .)
    COMMA           reduce using rule 54 (Expr -> Termo .)
    TO              reduce using rule 54 (Expr -> Termo .)
    TIMES           shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    AND             shift and go to state 101

    OpMul                          shift and go to state 97

state 54

    (59) Termo -> Fator .

    TIMES           reduce using rule 59 (Termo -> Fator .)
    DIV             reduce using rule 59 (Termo -> Fator .)
    MOD             reduce using rule 59 (Termo -> Fator .)
    AND             reduce using rule 59 (Termo -> Fator .)
    EQ              reduce using rule 59 (Termo -> Fator .)
    NEQ             reduce using rule 59 (Termo -> Fator .)
    LT              reduce using rule 59 (Termo -> Fator .)
    LTE             reduce using rule 59 (Termo -> Fator .)
    GT              reduce using rule 59 (Termo -> Fator .)
    GTE             reduce using rule 59 (Termo -> Fator .)
    PLUS            reduce using rule 59 (Termo -> Fator .)
    MINUS           reduce using rule 59 (Termo -> Fator .)
    OR              reduce using rule 59 (Termo -> Fator .)
    THEN            reduce using rule 59 (Termo -> Fator .)
    DO              reduce using rule 59 (Termo -> Fator .)
    END             reduce using rule 59 (Termo -> Fator .)
    SEMICOLON       reduce using rule 59 (Termo -> Fator .)
    ELSE            reduce using rule 59 (Termo -> Fator .)
    RBRACKET        reduce using rule 59 (Termo -> Fator .)
    RPAREN          reduce using rule 59 (Termo -> Fator .)
    COMMA           reduce using rule 59 (Termo -> Fator .)
    TO              reduce using rule 59 (Termo -> Fator .)


state 55

    (65) Fator -> Const .

    TIMES           reduce using rule 65 (Fator -> Const .)
    DIV             reduce using rule 65 (Fator -> Const .)
    MOD             reduce using rule 65 (Fator -> Const .)
    AND             reduce using rule 65 (Fator -> Const .)
    EQ              reduce using rule 65 (Fator -> Const .)
    NEQ             reduce using rule 65 (Fator -> Const .)
    LT              reduce using rule 65 (Fator -> Const .)
    LTE             reduce using rule 65 (Fator -> Const .)
    GT              reduce using rule 65 (Fator -> Const .)
    GTE             reduce using rule 65 (Fator -> Const .)
    PLUS            reduce using rule 65 (Fator -> Const .)
    MINUS           reduce using rule 65 (Fator -> Const .)
    OR              reduce using rule 65 (Fator -> Const .)
    THEN            reduce using rule 65 (Fator -> Const .)
    DO              reduce using rule 65 (Fator -> Const .)
    END             reduce using rule 65 (Fator -> Const .)
    SEMICOLON       reduce using rule 65 (Fator -> Const .)
    ELSE            reduce using rule 65 (Fator -> Const .)
    RBRACKET        reduce using rule 65 (Fator -> Const .)
    RPAREN          reduce using rule 65 (Fator -> Const .)
    COMMA           reduce using rule 65 (Fator -> Const .)
    TO              reduce using rule 65 (Fator -> Const .)


state 56

    (66) Fator -> Var .

    TIMES           reduce using rule 66 (Fator -> Var .)
    DIV             reduce using rule 66 (Fator -> Var .)
    MOD             reduce using rule 66 (Fator -> Var .)
    AND             reduce using rule 66 (Fator -> Var .)
    EQ              reduce using rule 66 (Fator -> Var .)
    NEQ             reduce using rule 66 (Fator -> Var .)
    LT              reduce using rule 66 (Fator -> Var .)
    LTE             reduce using rule 66 (Fator -> Var .)
    GT              reduce using rule 66 (Fator -> Var .)
    GTE             reduce using rule 66 (Fator -> Var .)
    PLUS            reduce using rule 66 (Fator -> Var .)
    MINUS           reduce using rule 66 (Fator -> Var .)
    OR              reduce using rule 66 (Fator -> Var .)
    THEN            reduce using rule 66 (Fator -> Var .)
    DO              reduce using rule 66 (Fator -> Var .)
    END             reduce using rule 66 (Fator -> Var .)
    SEMICOLON       reduce using rule 66 (Fator -> Var .)
    ELSE            reduce using rule 66 (Fator -> Var .)
    RBRACKET        reduce using rule 66 (Fator -> Var .)
    RPAREN          reduce using rule 66 (Fator -> Var .)
    COMMA           reduce using rule 66 (Fator -> Var .)
    TO              reduce using rule 66 (Fator -> Var .)


state 57

    (67) Fator -> LPAREN . ExprBool RPAREN
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ExprBool                       shift and go to state 102
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 58

    (68) Fator -> Expression_function_call .

    TIMES           reduce using rule 68 (Fator -> Expression_function_call .)
    DIV             reduce using rule 68 (Fator -> Expression_function_call .)
    MOD             reduce using rule 68 (Fator -> Expression_function_call .)
    AND             reduce using rule 68 (Fator -> Expression_function_call .)
    EQ              reduce using rule 68 (Fator -> Expression_function_call .)
    NEQ             reduce using rule 68 (Fator -> Expression_function_call .)
    LT              reduce using rule 68 (Fator -> Expression_function_call .)
    LTE             reduce using rule 68 (Fator -> Expression_function_call .)
    GT              reduce using rule 68 (Fator -> Expression_function_call .)
    GTE             reduce using rule 68 (Fator -> Expression_function_call .)
    PLUS            reduce using rule 68 (Fator -> Expression_function_call .)
    MINUS           reduce using rule 68 (Fator -> Expression_function_call .)
    OR              reduce using rule 68 (Fator -> Expression_function_call .)
    THEN            reduce using rule 68 (Fator -> Expression_function_call .)
    DO              reduce using rule 68 (Fator -> Expression_function_call .)
    END             reduce using rule 68 (Fator -> Expression_function_call .)
    SEMICOLON       reduce using rule 68 (Fator -> Expression_function_call .)
    ELSE            reduce using rule 68 (Fator -> Expression_function_call .)
    RBRACKET        reduce using rule 68 (Fator -> Expression_function_call .)
    RPAREN          reduce using rule 68 (Fator -> Expression_function_call .)
    COMMA           reduce using rule 68 (Fator -> Expression_function_call .)
    TO              reduce using rule 68 (Fator -> Expression_function_call .)


state 59

    (69) Fator -> NOT . Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Fator                          shift and go to state 103
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 60

    (70) Const -> NUMBER .

    TIMES           reduce using rule 70 (Const -> NUMBER .)
    DIV             reduce using rule 70 (Const -> NUMBER .)
    MOD             reduce using rule 70 (Const -> NUMBER .)
    AND             reduce using rule 70 (Const -> NUMBER .)
    EQ              reduce using rule 70 (Const -> NUMBER .)
    NEQ             reduce using rule 70 (Const -> NUMBER .)
    LT              reduce using rule 70 (Const -> NUMBER .)
    LTE             reduce using rule 70 (Const -> NUMBER .)
    GT              reduce using rule 70 (Const -> NUMBER .)
    GTE             reduce using rule 70 (Const -> NUMBER .)
    PLUS            reduce using rule 70 (Const -> NUMBER .)
    MINUS           reduce using rule 70 (Const -> NUMBER .)
    OR              reduce using rule 70 (Const -> NUMBER .)
    THEN            reduce using rule 70 (Const -> NUMBER .)
    DO              reduce using rule 70 (Const -> NUMBER .)
    END             reduce using rule 70 (Const -> NUMBER .)
    SEMICOLON       reduce using rule 70 (Const -> NUMBER .)
    ELSE            reduce using rule 70 (Const -> NUMBER .)
    RBRACKET        reduce using rule 70 (Const -> NUMBER .)
    RPAREN          reduce using rule 70 (Const -> NUMBER .)
    COMMA           reduce using rule 70 (Const -> NUMBER .)
    TO              reduce using rule 70 (Const -> NUMBER .)


state 61

    (71) Const -> STRING_LITERAL .

    TIMES           reduce using rule 71 (Const -> STRING_LITERAL .)
    DIV             reduce using rule 71 (Const -> STRING_LITERAL .)
    MOD             reduce using rule 71 (Const -> STRING_LITERAL .)
    AND             reduce using rule 71 (Const -> STRING_LITERAL .)
    EQ              reduce using rule 71 (Const -> STRING_LITERAL .)
    NEQ             reduce using rule 71 (Const -> STRING_LITERAL .)
    LT              reduce using rule 71 (Const -> STRING_LITERAL .)
    LTE             reduce using rule 71 (Const -> STRING_LITERAL .)
    GT              reduce using rule 71 (Const -> STRING_LITERAL .)
    GTE             reduce using rule 71 (Const -> STRING_LITERAL .)
    PLUS            reduce using rule 71 (Const -> STRING_LITERAL .)
    MINUS           reduce using rule 71 (Const -> STRING_LITERAL .)
    OR              reduce using rule 71 (Const -> STRING_LITERAL .)
    THEN            reduce using rule 71 (Const -> STRING_LITERAL .)
    DO              reduce using rule 71 (Const -> STRING_LITERAL .)
    END             reduce using rule 71 (Const -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 71 (Const -> STRING_LITERAL .)
    ELSE            reduce using rule 71 (Const -> STRING_LITERAL .)
    RBRACKET        reduce using rule 71 (Const -> STRING_LITERAL .)
    RPAREN          reduce using rule 71 (Const -> STRING_LITERAL .)
    COMMA           reduce using rule 71 (Const -> STRING_LITERAL .)
    TO              reduce using rule 71 (Const -> STRING_LITERAL .)


state 62

    (72) Const -> TRUE .

    TIMES           reduce using rule 72 (Const -> TRUE .)
    DIV             reduce using rule 72 (Const -> TRUE .)
    MOD             reduce using rule 72 (Const -> TRUE .)
    AND             reduce using rule 72 (Const -> TRUE .)
    EQ              reduce using rule 72 (Const -> TRUE .)
    NEQ             reduce using rule 72 (Const -> TRUE .)
    LT              reduce using rule 72 (Const -> TRUE .)
    LTE             reduce using rule 72 (Const -> TRUE .)
    GT              reduce using rule 72 (Const -> TRUE .)
    GTE             reduce using rule 72 (Const -> TRUE .)
    PLUS            reduce using rule 72 (Const -> TRUE .)
    MINUS           reduce using rule 72 (Const -> TRUE .)
    OR              reduce using rule 72 (Const -> TRUE .)
    THEN            reduce using rule 72 (Const -> TRUE .)
    DO              reduce using rule 72 (Const -> TRUE .)
    END             reduce using rule 72 (Const -> TRUE .)
    SEMICOLON       reduce using rule 72 (Const -> TRUE .)
    ELSE            reduce using rule 72 (Const -> TRUE .)
    RBRACKET        reduce using rule 72 (Const -> TRUE .)
    RPAREN          reduce using rule 72 (Const -> TRUE .)
    COMMA           reduce using rule 72 (Const -> TRUE .)
    TO              reduce using rule 72 (Const -> TRUE .)


state 63

    (73) Const -> FALSE .

    TIMES           reduce using rule 73 (Const -> FALSE .)
    DIV             reduce using rule 73 (Const -> FALSE .)
    MOD             reduce using rule 73 (Const -> FALSE .)
    AND             reduce using rule 73 (Const -> FALSE .)
    EQ              reduce using rule 73 (Const -> FALSE .)
    NEQ             reduce using rule 73 (Const -> FALSE .)
    LT              reduce using rule 73 (Const -> FALSE .)
    LTE             reduce using rule 73 (Const -> FALSE .)
    GT              reduce using rule 73 (Const -> FALSE .)
    GTE             reduce using rule 73 (Const -> FALSE .)
    PLUS            reduce using rule 73 (Const -> FALSE .)
    MINUS           reduce using rule 73 (Const -> FALSE .)
    OR              reduce using rule 73 (Const -> FALSE .)
    THEN            reduce using rule 73 (Const -> FALSE .)
    DO              reduce using rule 73 (Const -> FALSE .)
    END             reduce using rule 73 (Const -> FALSE .)
    SEMICOLON       reduce using rule 73 (Const -> FALSE .)
    ELSE            reduce using rule 73 (Const -> FALSE .)
    RBRACKET        reduce using rule 73 (Const -> FALSE .)
    RPAREN          reduce using rule 73 (Const -> FALSE .)
    COMMA           reduce using rule 73 (Const -> FALSE .)
    TO              reduce using rule 73 (Const -> FALSE .)


state 64

    (74) Var -> ID .
    (75) Var -> ID . LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> ID . LPAREN ActualParameters RPAREN

    TIMES           reduce using rule 74 (Var -> ID .)
    DIV             reduce using rule 74 (Var -> ID .)
    MOD             reduce using rule 74 (Var -> ID .)
    AND             reduce using rule 74 (Var -> ID .)
    EQ              reduce using rule 74 (Var -> ID .)
    NEQ             reduce using rule 74 (Var -> ID .)
    LT              reduce using rule 74 (Var -> ID .)
    LTE             reduce using rule 74 (Var -> ID .)
    GT              reduce using rule 74 (Var -> ID .)
    GTE             reduce using rule 74 (Var -> ID .)
    PLUS            reduce using rule 74 (Var -> ID .)
    MINUS           reduce using rule 74 (Var -> ID .)
    OR              reduce using rule 74 (Var -> ID .)
    THEN            reduce using rule 74 (Var -> ID .)
    DO              reduce using rule 74 (Var -> ID .)
    END             reduce using rule 74 (Var -> ID .)
    SEMICOLON       reduce using rule 74 (Var -> ID .)
    ELSE            reduce using rule 74 (Var -> ID .)
    RBRACKET        reduce using rule 74 (Var -> ID .)
    RPAREN          reduce using rule 74 (Var -> ID .)
    COMMA           reduce using rule 74 (Var -> ID .)
    TO              reduce using rule 74 (Var -> ID .)
    LBRACKET        shift and go to state 104
    LPAREN          shift and go to state 105


state 65

    (77) Expression_function_call -> LENGTH . LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 106


state 66

    (43) WhileStatement -> WHILE Expression . DO Statement

    DO              shift and go to state 107


state 67

    (44) ForStatement -> FOR ID . ASSIGN Expression TO Expression DO Statement

    ASSIGN          shift and go to state 108


state 68

    (19) FunctionDeclaration -> FUNCTION ID LPAREN . FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement
    (20) FormalParameters -> . ID COLON Type
    (21) FormalParameters -> . ID COLON Type SEMICOLON FormalParameters
    (22) FormalParameters -> . empty
    (82) empty -> .

    ID              shift and go to state 109
    RPAREN          reduce using rule 82 (empty -> .)

    FormalParameters               shift and go to state 110
    empty                          shift and go to state 111

state 69

    (8) VarDeclaration -> IdList COLON Type . SEMICOLON

    SEMICOLON       shift and go to state 112


state 70

    (11) Type -> BasicType .

    SEMICOLON       reduce using rule 11 (Type -> BasicType .)
    RPAREN          reduce using rule 11 (Type -> BasicType .)


state 71

    (12) Type -> ArrayType .

    SEMICOLON       reduce using rule 12 (Type -> ArrayType .)
    RPAREN          reduce using rule 12 (Type -> ArrayType .)


state 72

    (13) BasicType -> INTEGER .

    SEMICOLON       reduce using rule 13 (BasicType -> INTEGER .)
    RPAREN          reduce using rule 13 (BasicType -> INTEGER .)


state 73

    (14) BasicType -> STRING .

    SEMICOLON       reduce using rule 14 (BasicType -> STRING .)
    RPAREN          reduce using rule 14 (BasicType -> STRING .)


state 74

    (15) BasicType -> BOOLEAN .

    SEMICOLON       reduce using rule 15 (BasicType -> BOOLEAN .)
    RPAREN          reduce using rule 15 (BasicType -> BOOLEAN .)


state 75

    (16) ArrayType -> ARRAY . LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType

    LBRACKET        shift and go to state 113


state 76

    (10) IdList -> ID COMMA IdList .

    COLON           reduce using rule 10 (IdList -> ID COMMA IdList .)


state 77

    (25) StatementList -> StatementList SEMICOLON Statement .

    END             reduce using rule 25 (StatementList -> StatementList SEMICOLON Statement .)
    SEMICOLON       reduce using rule 25 (StatementList -> StatementList SEMICOLON Statement .)


state 78

    (36) AssignmentStatement -> ID ASSIGN Expression .

    END             reduce using rule 36 (AssignmentStatement -> ID ASSIGN Expression .)
    SEMICOLON       reduce using rule 36 (AssignmentStatement -> ID ASSIGN Expression .)
    ELSE            reduce using rule 36 (AssignmentStatement -> ID ASSIGN Expression .)


state 79

    (81) ArrayAccess -> ID LBRACKET Expression . RBRACKET

    RBRACKET        shift and go to state 114


state 80

    (37) AssignmentStatement -> ArrayAccess ASSIGN Expression .

    END             reduce using rule 37 (AssignmentStatement -> ArrayAccess ASSIGN Expression .)
    SEMICOLON       reduce using rule 37 (AssignmentStatement -> ArrayAccess ASSIGN Expression .)
    ELSE            reduce using rule 37 (AssignmentStatement -> ArrayAccess ASSIGN Expression .)


state 81

    (38) WriteStatement -> WRITELN LPAREN ExpressionList . RPAREN
    (40) ExpressionList -> ExpressionList . COMMA Expression

    RPAREN          shift and go to state 115
    COMMA           shift and go to state 116


state 82

    (39) ExpressionList -> Expression .

    RPAREN          reduce using rule 39 (ExpressionList -> Expression .)
    COMMA           reduce using rule 39 (ExpressionList -> Expression .)


state 83

    (34) ReadStatement -> READLN LPAREN ArrayAccess . RPAREN

    RPAREN          shift and go to state 117


state 84

    (35) ReadStatement -> READLN LPAREN ID . RPAREN
    (81) ArrayAccess -> ID . LBRACKET Expression RBRACKET

    RPAREN          shift and go to state 118
    LBRACKET        shift and go to state 46


state 85

    (41) IfStatement -> IF Expression THEN . Statement
    (42) IfStatement -> IF Expression THEN . Statement ELSE Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    ELSE            reduce using rule 82 (empty -> .)
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    Statement                      shift and go to state 119
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 86

    (47) ExprBool -> Expr OpRel . Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expr                           shift and go to state 120
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 87

    (55) Expr -> Expr OpAd . Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Termo                          shift and go to state 121
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 88

    (48) OpRel -> EQ .

    LPAREN          reduce using rule 48 (OpRel -> EQ .)
    NOT             reduce using rule 48 (OpRel -> EQ .)
    NUMBER          reduce using rule 48 (OpRel -> EQ .)
    STRING_LITERAL  reduce using rule 48 (OpRel -> EQ .)
    TRUE            reduce using rule 48 (OpRel -> EQ .)
    FALSE           reduce using rule 48 (OpRel -> EQ .)
    ID              reduce using rule 48 (OpRel -> EQ .)
    LENGTH          reduce using rule 48 (OpRel -> EQ .)


state 89

    (49) OpRel -> NEQ .

    LPAREN          reduce using rule 49 (OpRel -> NEQ .)
    NOT             reduce using rule 49 (OpRel -> NEQ .)
    NUMBER          reduce using rule 49 (OpRel -> NEQ .)
    STRING_LITERAL  reduce using rule 49 (OpRel -> NEQ .)
    TRUE            reduce using rule 49 (OpRel -> NEQ .)
    FALSE           reduce using rule 49 (OpRel -> NEQ .)
    ID              reduce using rule 49 (OpRel -> NEQ .)
    LENGTH          reduce using rule 49 (OpRel -> NEQ .)


state 90

    (50) OpRel -> LT .

    LPAREN          reduce using rule 50 (OpRel -> LT .)
    NOT             reduce using rule 50 (OpRel -> LT .)
    NUMBER          reduce using rule 50 (OpRel -> LT .)
    STRING_LITERAL  reduce using rule 50 (OpRel -> LT .)
    TRUE            reduce using rule 50 (OpRel -> LT .)
    FALSE           reduce using rule 50 (OpRel -> LT .)
    ID              reduce using rule 50 (OpRel -> LT .)
    LENGTH          reduce using rule 50 (OpRel -> LT .)


state 91

    (51) OpRel -> LTE .

    LPAREN          reduce using rule 51 (OpRel -> LTE .)
    NOT             reduce using rule 51 (OpRel -> LTE .)
    NUMBER          reduce using rule 51 (OpRel -> LTE .)
    STRING_LITERAL  reduce using rule 51 (OpRel -> LTE .)
    TRUE            reduce using rule 51 (OpRel -> LTE .)
    FALSE           reduce using rule 51 (OpRel -> LTE .)
    ID              reduce using rule 51 (OpRel -> LTE .)
    LENGTH          reduce using rule 51 (OpRel -> LTE .)


state 92

    (52) OpRel -> GT .

    LPAREN          reduce using rule 52 (OpRel -> GT .)
    NOT             reduce using rule 52 (OpRel -> GT .)
    NUMBER          reduce using rule 52 (OpRel -> GT .)
    STRING_LITERAL  reduce using rule 52 (OpRel -> GT .)
    TRUE            reduce using rule 52 (OpRel -> GT .)
    FALSE           reduce using rule 52 (OpRel -> GT .)
    ID              reduce using rule 52 (OpRel -> GT .)
    LENGTH          reduce using rule 52 (OpRel -> GT .)


state 93

    (53) OpRel -> GTE .

    LPAREN          reduce using rule 53 (OpRel -> GTE .)
    NOT             reduce using rule 53 (OpRel -> GTE .)
    NUMBER          reduce using rule 53 (OpRel -> GTE .)
    STRING_LITERAL  reduce using rule 53 (OpRel -> GTE .)
    TRUE            reduce using rule 53 (OpRel -> GTE .)
    FALSE           reduce using rule 53 (OpRel -> GTE .)
    ID              reduce using rule 53 (OpRel -> GTE .)
    LENGTH          reduce using rule 53 (OpRel -> GTE .)


state 94

    (56) OpAd -> PLUS .

    LPAREN          reduce using rule 56 (OpAd -> PLUS .)
    NOT             reduce using rule 56 (OpAd -> PLUS .)
    NUMBER          reduce using rule 56 (OpAd -> PLUS .)
    STRING_LITERAL  reduce using rule 56 (OpAd -> PLUS .)
    TRUE            reduce using rule 56 (OpAd -> PLUS .)
    FALSE           reduce using rule 56 (OpAd -> PLUS .)
    ID              reduce using rule 56 (OpAd -> PLUS .)
    LENGTH          reduce using rule 56 (OpAd -> PLUS .)


state 95

    (57) OpAd -> MINUS .

    LPAREN          reduce using rule 57 (OpAd -> MINUS .)
    NOT             reduce using rule 57 (OpAd -> MINUS .)
    NUMBER          reduce using rule 57 (OpAd -> MINUS .)
    STRING_LITERAL  reduce using rule 57 (OpAd -> MINUS .)
    TRUE            reduce using rule 57 (OpAd -> MINUS .)
    FALSE           reduce using rule 57 (OpAd -> MINUS .)
    ID              reduce using rule 57 (OpAd -> MINUS .)
    LENGTH          reduce using rule 57 (OpAd -> MINUS .)


state 96

    (58) OpAd -> OR .

    LPAREN          reduce using rule 58 (OpAd -> OR .)
    NOT             reduce using rule 58 (OpAd -> OR .)
    NUMBER          reduce using rule 58 (OpAd -> OR .)
    STRING_LITERAL  reduce using rule 58 (OpAd -> OR .)
    TRUE            reduce using rule 58 (OpAd -> OR .)
    FALSE           reduce using rule 58 (OpAd -> OR .)
    ID              reduce using rule 58 (OpAd -> OR .)
    LENGTH          reduce using rule 58 (OpAd -> OR .)


state 97

    (60) Termo -> Termo OpMul . Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Fator                          shift and go to state 122
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 98

    (61) OpMul -> TIMES .

    LPAREN          reduce using rule 61 (OpMul -> TIMES .)
    NOT             reduce using rule 61 (OpMul -> TIMES .)
    NUMBER          reduce using rule 61 (OpMul -> TIMES .)
    STRING_LITERAL  reduce using rule 61 (OpMul -> TIMES .)
    TRUE            reduce using rule 61 (OpMul -> TIMES .)
    FALSE           reduce using rule 61 (OpMul -> TIMES .)
    ID              reduce using rule 61 (OpMul -> TIMES .)
    LENGTH          reduce using rule 61 (OpMul -> TIMES .)


state 99

    (62) OpMul -> DIV .

    LPAREN          reduce using rule 62 (OpMul -> DIV .)
    NOT             reduce using rule 62 (OpMul -> DIV .)
    NUMBER          reduce using rule 62 (OpMul -> DIV .)
    STRING_LITERAL  reduce using rule 62 (OpMul -> DIV .)
    TRUE            reduce using rule 62 (OpMul -> DIV .)
    FALSE           reduce using rule 62 (OpMul -> DIV .)
    ID              reduce using rule 62 (OpMul -> DIV .)
    LENGTH          reduce using rule 62 (OpMul -> DIV .)


state 100

    (63) OpMul -> MOD .

    LPAREN          reduce using rule 63 (OpMul -> MOD .)
    NOT             reduce using rule 63 (OpMul -> MOD .)
    NUMBER          reduce using rule 63 (OpMul -> MOD .)
    STRING_LITERAL  reduce using rule 63 (OpMul -> MOD .)
    TRUE            reduce using rule 63 (OpMul -> MOD .)
    FALSE           reduce using rule 63 (OpMul -> MOD .)
    ID              reduce using rule 63 (OpMul -> MOD .)
    LENGTH          reduce using rule 63 (OpMul -> MOD .)


state 101

    (64) OpMul -> AND .

    LPAREN          reduce using rule 64 (OpMul -> AND .)
    NOT             reduce using rule 64 (OpMul -> AND .)
    NUMBER          reduce using rule 64 (OpMul -> AND .)
    STRING_LITERAL  reduce using rule 64 (OpMul -> AND .)
    TRUE            reduce using rule 64 (OpMul -> AND .)
    FALSE           reduce using rule 64 (OpMul -> AND .)
    ID              reduce using rule 64 (OpMul -> AND .)
    LENGTH          reduce using rule 64 (OpMul -> AND .)


state 102

    (67) Fator -> LPAREN ExprBool . RPAREN

    RPAREN          shift and go to state 123


state 103

    (69) Fator -> NOT Fator .

    TIMES           reduce using rule 69 (Fator -> NOT Fator .)
    DIV             reduce using rule 69 (Fator -> NOT Fator .)
    MOD             reduce using rule 69 (Fator -> NOT Fator .)
    AND             reduce using rule 69 (Fator -> NOT Fator .)
    EQ              reduce using rule 69 (Fator -> NOT Fator .)
    NEQ             reduce using rule 69 (Fator -> NOT Fator .)
    LT              reduce using rule 69 (Fator -> NOT Fator .)
    LTE             reduce using rule 69 (Fator -> NOT Fator .)
    GT              reduce using rule 69 (Fator -> NOT Fator .)
    GTE             reduce using rule 69 (Fator -> NOT Fator .)
    PLUS            reduce using rule 69 (Fator -> NOT Fator .)
    MINUS           reduce using rule 69 (Fator -> NOT Fator .)
    OR              reduce using rule 69 (Fator -> NOT Fator .)
    THEN            reduce using rule 69 (Fator -> NOT Fator .)
    DO              reduce using rule 69 (Fator -> NOT Fator .)
    END             reduce using rule 69 (Fator -> NOT Fator .)
    SEMICOLON       reduce using rule 69 (Fator -> NOT Fator .)
    ELSE            reduce using rule 69 (Fator -> NOT Fator .)
    RBRACKET        reduce using rule 69 (Fator -> NOT Fator .)
    RPAREN          reduce using rule 69 (Fator -> NOT Fator .)
    COMMA           reduce using rule 69 (Fator -> NOT Fator .)
    TO              reduce using rule 69 (Fator -> NOT Fator .)


state 104

    (75) Var -> ID LBRACKET . ExprBool RBRACKET
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ExprBool                       shift and go to state 124
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 105

    (76) Expression_function_call -> ID LPAREN . ActualParameters RPAREN
    (78) ActualParameters -> . ExprBool
    (79) ActualParameters -> . ExprBool COMMA ActualParameters
    (80) ActualParameters -> . empty
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (82) empty -> .
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    RPAREN          reduce using rule 82 (empty -> .)
    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ActualParameters               shift and go to state 125
    ExprBool                       shift and go to state 126
    empty                          shift and go to state 127
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 106

    (77) Expression_function_call -> LENGTH LPAREN . ExprBool RPAREN
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ExprBool                       shift and go to state 128
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 107

    (43) WhileStatement -> WHILE Expression DO . Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    ELSE            reduce using rule 82 (empty -> .)
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    Statement                      shift and go to state 129
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 108

    (44) ForStatement -> FOR ID ASSIGN . Expression TO Expression DO Statement
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 130
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 109

    (20) FormalParameters -> ID . COLON Type
    (21) FormalParameters -> ID . COLON Type SEMICOLON FormalParameters

    COLON           shift and go to state 131


state 110

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters . RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement

    RPAREN          shift and go to state 132


state 111

    (22) FormalParameters -> empty .

    RPAREN          reduce using rule 22 (FormalParameters -> empty .)


state 112

    (8) VarDeclaration -> IdList COLON Type SEMICOLON .

    ID              reduce using rule 8 (VarDeclaration -> IdList COLON Type SEMICOLON .)
    FUNCTION        reduce using rule 8 (VarDeclaration -> IdList COLON Type SEMICOLON .)
    BEGIN           reduce using rule 8 (VarDeclaration -> IdList COLON Type SEMICOLON .)


state 113

    (16) ArrayType -> ARRAY LBRACKET . NUMBER DOTDOT NUMBER RBRACKET OF BasicType

    NUMBER          shift and go to state 133


state 114

    (81) ArrayAccess -> ID LBRACKET Expression RBRACKET .

    ASSIGN          reduce using rule 81 (ArrayAccess -> ID LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 81 (ArrayAccess -> ID LBRACKET Expression RBRACKET .)


state 115

    (38) WriteStatement -> WRITELN LPAREN ExpressionList RPAREN .

    END             reduce using rule 38 (WriteStatement -> WRITELN LPAREN ExpressionList RPAREN .)
    SEMICOLON       reduce using rule 38 (WriteStatement -> WRITELN LPAREN ExpressionList RPAREN .)
    ELSE            reduce using rule 38 (WriteStatement -> WRITELN LPAREN ExpressionList RPAREN .)


state 116

    (40) ExpressionList -> ExpressionList COMMA . Expression
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 134
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 117

    (34) ReadStatement -> READLN LPAREN ArrayAccess RPAREN .

    END             reduce using rule 34 (ReadStatement -> READLN LPAREN ArrayAccess RPAREN .)
    SEMICOLON       reduce using rule 34 (ReadStatement -> READLN LPAREN ArrayAccess RPAREN .)
    ELSE            reduce using rule 34 (ReadStatement -> READLN LPAREN ArrayAccess RPAREN .)


state 118

    (35) ReadStatement -> READLN LPAREN ID RPAREN .

    END             reduce using rule 35 (ReadStatement -> READLN LPAREN ID RPAREN .)
    SEMICOLON       reduce using rule 35 (ReadStatement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 35 (ReadStatement -> READLN LPAREN ID RPAREN .)


state 119

    (41) IfStatement -> IF Expression THEN Statement .
    (42) IfStatement -> IF Expression THEN Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 41 (IfStatement -> IF Expression THEN Statement .)
    SEMICOLON       reduce using rule 41 (IfStatement -> IF Expression THEN Statement .)
    ELSE            shift and go to state 135

  ! ELSE            [ reduce using rule 41 (IfStatement -> IF Expression THEN Statement .) ]


state 120

    (47) ExprBool -> Expr OpRel Expr .
    (55) Expr -> Expr . OpAd Termo
    (56) OpAd -> . PLUS
    (57) OpAd -> . MINUS
    (58) OpAd -> . OR

    THEN            reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    DO              reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    END             reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    SEMICOLON       reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    ELSE            reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    RBRACKET        reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    RPAREN          reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    COMMA           reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    TO              reduce using rule 47 (ExprBool -> Expr OpRel Expr .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96

    OpAd                           shift and go to state 87

state 121

    (55) Expr -> Expr OpAd Termo .
    (60) Termo -> Termo . OpMul Fator
    (61) OpMul -> . TIMES
    (62) OpMul -> . DIV
    (63) OpMul -> . MOD
    (64) OpMul -> . AND

    EQ              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    NEQ             reduce using rule 55 (Expr -> Expr OpAd Termo .)
    LT              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    LTE             reduce using rule 55 (Expr -> Expr OpAd Termo .)
    GT              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    GTE             reduce using rule 55 (Expr -> Expr OpAd Termo .)
    PLUS            reduce using rule 55 (Expr -> Expr OpAd Termo .)
    MINUS           reduce using rule 55 (Expr -> Expr OpAd Termo .)
    OR              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    THEN            reduce using rule 55 (Expr -> Expr OpAd Termo .)
    DO              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    END             reduce using rule 55 (Expr -> Expr OpAd Termo .)
    SEMICOLON       reduce using rule 55 (Expr -> Expr OpAd Termo .)
    ELSE            reduce using rule 55 (Expr -> Expr OpAd Termo .)
    RBRACKET        reduce using rule 55 (Expr -> Expr OpAd Termo .)
    RPAREN          reduce using rule 55 (Expr -> Expr OpAd Termo .)
    COMMA           reduce using rule 55 (Expr -> Expr OpAd Termo .)
    TO              reduce using rule 55 (Expr -> Expr OpAd Termo .)
    TIMES           shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    AND             shift and go to state 101

    OpMul                          shift and go to state 97

state 122

    (60) Termo -> Termo OpMul Fator .

    TIMES           reduce using rule 60 (Termo -> Termo OpMul Fator .)
    DIV             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    MOD             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    AND             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    EQ              reduce using rule 60 (Termo -> Termo OpMul Fator .)
    NEQ             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    LT              reduce using rule 60 (Termo -> Termo OpMul Fator .)
    LTE             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    GT              reduce using rule 60 (Termo -> Termo OpMul Fator .)
    GTE             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    PLUS            reduce using rule 60 (Termo -> Termo OpMul Fator .)
    MINUS           reduce using rule 60 (Termo -> Termo OpMul Fator .)
    OR              reduce using rule 60 (Termo -> Termo OpMul Fator .)
    THEN            reduce using rule 60 (Termo -> Termo OpMul Fator .)
    DO              reduce using rule 60 (Termo -> Termo OpMul Fator .)
    END             reduce using rule 60 (Termo -> Termo OpMul Fator .)
    SEMICOLON       reduce using rule 60 (Termo -> Termo OpMul Fator .)
    ELSE            reduce using rule 60 (Termo -> Termo OpMul Fator .)
    RBRACKET        reduce using rule 60 (Termo -> Termo OpMul Fator .)
    RPAREN          reduce using rule 60 (Termo -> Termo OpMul Fator .)
    COMMA           reduce using rule 60 (Termo -> Termo OpMul Fator .)
    TO              reduce using rule 60 (Termo -> Termo OpMul Fator .)


state 123

    (67) Fator -> LPAREN ExprBool RPAREN .

    TIMES           reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    DIV             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    MOD             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    AND             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    EQ              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    NEQ             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    LT              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    LTE             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    GT              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    GTE             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    PLUS            reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    MINUS           reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    OR              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    THEN            reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    DO              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    END             reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    SEMICOLON       reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    ELSE            reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    RBRACKET        reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    RPAREN          reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    COMMA           reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)
    TO              reduce using rule 67 (Fator -> LPAREN ExprBool RPAREN .)


state 124

    (75) Var -> ID LBRACKET ExprBool . RBRACKET

    RBRACKET        shift and go to state 136


state 125

    (76) Expression_function_call -> ID LPAREN ActualParameters . RPAREN

    RPAREN          shift and go to state 137


state 126

    (78) ActualParameters -> ExprBool .
    (79) ActualParameters -> ExprBool . COMMA ActualParameters

    RPAREN          reduce using rule 78 (ActualParameters -> ExprBool .)
    COMMA           shift and go to state 138


state 127

    (80) ActualParameters -> empty .

    RPAREN          reduce using rule 80 (ActualParameters -> empty .)


state 128

    (77) Expression_function_call -> LENGTH LPAREN ExprBool . RPAREN

    RPAREN          shift and go to state 139


state 129

    (43) WhileStatement -> WHILE Expression DO Statement .

    END             reduce using rule 43 (WhileStatement -> WHILE Expression DO Statement .)
    SEMICOLON       reduce using rule 43 (WhileStatement -> WHILE Expression DO Statement .)
    ELSE            reduce using rule 43 (WhileStatement -> WHILE Expression DO Statement .)


state 130

    (44) ForStatement -> FOR ID ASSIGN Expression . TO Expression DO Statement

    TO              shift and go to state 140


state 131

    (20) FormalParameters -> ID COLON . Type
    (21) FormalParameters -> ID COLON . Type SEMICOLON FormalParameters
    (11) Type -> . BasicType
    (12) Type -> . ArrayType
    (13) BasicType -> . INTEGER
    (14) BasicType -> . STRING
    (15) BasicType -> . BOOLEAN
    (16) ArrayType -> . ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType

    INTEGER         shift and go to state 72
    STRING          shift and go to state 73
    BOOLEAN         shift and go to state 74
    ARRAY           shift and go to state 75

    Type                           shift and go to state 141
    BasicType                      shift and go to state 70
    ArrayType                      shift and go to state 71

state 132

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN . COLON BasicType SEMICOLON Declarations CompoundStatement

    COLON           shift and go to state 142


state 133

    (16) ArrayType -> ARRAY LBRACKET NUMBER . DOTDOT NUMBER RBRACKET OF BasicType

    DOTDOT          shift and go to state 143


state 134

    (40) ExpressionList -> ExpressionList COMMA Expression .

    RPAREN          reduce using rule 40 (ExpressionList -> ExpressionList COMMA Expression .)
    COMMA           reduce using rule 40 (ExpressionList -> ExpressionList COMMA Expression .)


state 135

    (42) IfStatement -> IF Expression THEN Statement ELSE . Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    ELSE            reduce using rule 82 (empty -> .)
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    Statement                      shift and go to state 144
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 136

    (75) Var -> ID LBRACKET ExprBool RBRACKET .

    TIMES           reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    DIV             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    MOD             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    AND             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    EQ              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    NEQ             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    LT              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    LTE             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    GT              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    GTE             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    PLUS            reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    MINUS           reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    OR              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    THEN            reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    DO              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    END             reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    SEMICOLON       reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    ELSE            reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    RBRACKET        reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    RPAREN          reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    COMMA           reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)
    TO              reduce using rule 75 (Var -> ID LBRACKET ExprBool RBRACKET .)


state 137

    (76) Expression_function_call -> ID LPAREN ActualParameters RPAREN .

    TIMES           reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    DIV             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    MOD             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    AND             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    EQ              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    NEQ             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    LT              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    LTE             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    GT              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    GTE             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    PLUS            reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    MINUS           reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    OR              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    THEN            reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    DO              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    END             reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    SEMICOLON       reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    ELSE            reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    RBRACKET        reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    RPAREN          reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    COMMA           reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)
    TO              reduce using rule 76 (Expression_function_call -> ID LPAREN ActualParameters RPAREN .)


state 138

    (79) ActualParameters -> ExprBool COMMA . ActualParameters
    (78) ActualParameters -> . ExprBool
    (79) ActualParameters -> . ExprBool COMMA ActualParameters
    (80) ActualParameters -> . empty
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (82) empty -> .
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    RPAREN          reduce using rule 82 (empty -> .)
    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    ExprBool                       shift and go to state 126
    ActualParameters               shift and go to state 145
    empty                          shift and go to state 127
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 139

    (77) Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .

    TIMES           reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    DIV             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    MOD             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    AND             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    EQ              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    NEQ             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    LT              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    LTE             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    GT              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    GTE             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    PLUS            reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    MINUS           reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    OR              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    THEN            reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    DO              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    END             reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    SEMICOLON       reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    ELSE            reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    RBRACKET        reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    RPAREN          reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    COMMA           reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)
    TO              reduce using rule 77 (Expression_function_call -> LENGTH LPAREN ExprBool RPAREN .)


state 140

    (44) ForStatement -> FOR ID ASSIGN Expression TO . Expression DO Statement
    (45) Expression -> . ExprBool
    (46) ExprBool -> . Expr
    (47) ExprBool -> . Expr OpRel Expr
    (54) Expr -> . Termo
    (55) Expr -> . Expr OpAd Termo
    (59) Termo -> . Fator
    (60) Termo -> . Termo OpMul Fator
    (65) Fator -> . Const
    (66) Fator -> . Var
    (67) Fator -> . LPAREN ExprBool RPAREN
    (68) Fator -> . Expression_function_call
    (69) Fator -> . NOT Fator
    (70) Const -> . NUMBER
    (71) Const -> . STRING_LITERAL
    (72) Const -> . TRUE
    (73) Const -> . FALSE
    (74) Var -> . ID
    (75) Var -> . ID LBRACKET ExprBool RBRACKET
    (76) Expression_function_call -> . ID LPAREN ActualParameters RPAREN
    (77) Expression_function_call -> . LENGTH LPAREN ExprBool RPAREN

    LPAREN          shift and go to state 57
    NOT             shift and go to state 59
    NUMBER          shift and go to state 60
    STRING_LITERAL  shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    ID              shift and go to state 64
    LENGTH          shift and go to state 65

    Expression                     shift and go to state 146
    ExprBool                       shift and go to state 51
    Expr                           shift and go to state 52
    Termo                          shift and go to state 53
    Fator                          shift and go to state 54
    Const                          shift and go to state 55
    Var                            shift and go to state 56
    Expression_function_call       shift and go to state 58

state 141

    (20) FormalParameters -> ID COLON Type .
    (21) FormalParameters -> ID COLON Type . SEMICOLON FormalParameters

    RPAREN          reduce using rule 20 (FormalParameters -> ID COLON Type .)
    SEMICOLON       shift and go to state 147


state 142

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON . BasicType SEMICOLON Declarations CompoundStatement
    (13) BasicType -> . INTEGER
    (14) BasicType -> . STRING
    (15) BasicType -> . BOOLEAN

    INTEGER         shift and go to state 72
    STRING          shift and go to state 73
    BOOLEAN         shift and go to state 74

    BasicType                      shift and go to state 148

state 143

    (16) ArrayType -> ARRAY LBRACKET NUMBER DOTDOT . NUMBER RBRACKET OF BasicType

    NUMBER          shift and go to state 149


state 144

    (42) IfStatement -> IF Expression THEN Statement ELSE Statement .

    END             reduce using rule 42 (IfStatement -> IF Expression THEN Statement ELSE Statement .)
    SEMICOLON       reduce using rule 42 (IfStatement -> IF Expression THEN Statement ELSE Statement .)
    ELSE            reduce using rule 42 (IfStatement -> IF Expression THEN Statement ELSE Statement .)


state 145

    (79) ActualParameters -> ExprBool COMMA ActualParameters .

    RPAREN          reduce using rule 79 (ActualParameters -> ExprBool COMMA ActualParameters .)


state 146

    (44) ForStatement -> FOR ID ASSIGN Expression TO Expression . DO Statement

    DO              shift and go to state 150


state 147

    (21) FormalParameters -> ID COLON Type SEMICOLON . FormalParameters
    (20) FormalParameters -> . ID COLON Type
    (21) FormalParameters -> . ID COLON Type SEMICOLON FormalParameters
    (22) FormalParameters -> . empty
    (82) empty -> .

    ID              shift and go to state 109
    RPAREN          reduce using rule 82 (empty -> .)

    FormalParameters               shift and go to state 151
    empty                          shift and go to state 111

state 148

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType . SEMICOLON Declarations CompoundStatement

    SEMICOLON       shift and go to state 152


state 149

    (16) ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER . RBRACKET OF BasicType

    RBRACKET        shift and go to state 153


state 150

    (44) ForStatement -> FOR ID ASSIGN Expression TO Expression DO . Statement
    (26) Statement -> . AssignmentStatement
    (27) Statement -> . WriteStatement
    (28) Statement -> . ReadStatement
    (29) Statement -> . IfStatement
    (30) Statement -> . WhileStatement
    (31) Statement -> . ForStatement
    (32) Statement -> . CompoundStatement
    (33) Statement -> . empty
    (36) AssignmentStatement -> . ID ASSIGN Expression
    (37) AssignmentStatement -> . ArrayAccess ASSIGN Expression
    (38) WriteStatement -> . WRITELN LPAREN ExpressionList RPAREN
    (34) ReadStatement -> . READLN LPAREN ArrayAccess RPAREN
    (35) ReadStatement -> . READLN LPAREN ID RPAREN
    (41) IfStatement -> . IF Expression THEN Statement
    (42) IfStatement -> . IF Expression THEN Statement ELSE Statement
    (43) WhileStatement -> . WHILE Expression DO Statement
    (44) ForStatement -> . FOR ID ASSIGN Expression TO Expression DO Statement
    (23) CompoundStatement -> . BEGIN StatementList END
    (82) empty -> .
    (81) ArrayAccess -> . ID LBRACKET Expression RBRACKET

    ID              shift and go to state 31
    WRITELN         shift and go to state 33
    READLN          shift and go to state 34
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    BEGIN           shift and go to state 12
    ELSE            reduce using rule 82 (empty -> .)
    END             reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)

    Statement                      shift and go to state 154
    AssignmentStatement            shift and go to state 23
    WriteStatement                 shift and go to state 24
    ReadStatement                  shift and go to state 25
    IfStatement                    shift and go to state 26
    WhileStatement                 shift and go to state 27
    ForStatement                   shift and go to state 28
    CompoundStatement              shift and go to state 29
    empty                          shift and go to state 30
    ArrayAccess                    shift and go to state 32

state 151

    (21) FormalParameters -> ID COLON Type SEMICOLON FormalParameters .

    RPAREN          reduce using rule 21 (FormalParameters -> ID COLON Type SEMICOLON FormalParameters .)


state 152

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON . Declarations CompoundStatement
    (3) Declarations -> . VarDeclarationPart FunctionDeclarations
    (4) VarDeclarationPart -> . VAR VarDeclarationList
    (5) VarDeclarationPart -> . empty
    (82) empty -> .

    VAR             shift and go to state 8
    FUNCTION        reduce using rule 82 (empty -> .)
    BEGIN           reduce using rule 82 (empty -> .)

    Declarations                   shift and go to state 155
    VarDeclarationPart             shift and go to state 7
    empty                          shift and go to state 9

state 153

    (16) ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET . OF BasicType

    OF              shift and go to state 156


state 154

    (44) ForStatement -> FOR ID ASSIGN Expression TO Expression DO Statement .

    END             reduce using rule 44 (ForStatement -> FOR ID ASSIGN Expression TO Expression DO Statement .)
    SEMICOLON       reduce using rule 44 (ForStatement -> FOR ID ASSIGN Expression TO Expression DO Statement .)
    ELSE            reduce using rule 44 (ForStatement -> FOR ID ASSIGN Expression TO Expression DO Statement .)


state 155

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations . CompoundStatement
    (23) CompoundStatement -> . BEGIN StatementList END

    BEGIN           shift and go to state 12

    CompoundStatement              shift and go to state 157

state 156

    (16) ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF . BasicType
    (13) BasicType -> . INTEGER
    (14) BasicType -> . STRING
    (15) BasicType -> . BOOLEAN

    INTEGER         shift and go to state 72
    STRING          shift and go to state 73
    BOOLEAN         shift and go to state 74

    BasicType                      shift and go to state 158

state 157

    (19) FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement .

    FUNCTION        reduce using rule 19 (FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement .)
    BEGIN           reduce using rule 19 (FunctionDeclaration -> FUNCTION ID LPAREN FormalParameters RPAREN COLON BasicType SEMICOLON Declarations CompoundStatement .)


state 158

    (16) ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType .

    SEMICOLON       reduce using rule 16 (ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType .)
    RPAREN          reduce using rule 16 (ArrayType -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF BasicType .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
